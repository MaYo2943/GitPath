apply plugin: 'com.android.application'
//apply plugin: 'realm-android'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.1"
	def currentVersionCode = getVersionCode()
    defaultConfig {
        manifestPlaceholders = [BUGHD_TOKEN: project.hasProperty("BUGHD_TOKEN") ? BUGHD_TOKEN : System.getenv("BUGHD_TOKEN")]
        applicationId "xyz.lizhuo.gitpath"
        minSdkVersion 16
        targetSdkVersion 22
		versionCode currentVersionCode
        versionName "1.0"

    }

    productFlavors{
        github{}
        firim{}
        wandoujia{}
        google{}
    }

    signingConfigs{
        release{
            storeFile file("../sign.jks")
            storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : System.getenv("KEYSTORE_PASS")
            keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : System.getenv("ALIAS_NAME")
            keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : System.getenv("ALIAS_PASS")
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            shrinkResources false
        }
        release {
            minifyEnabled false
            zipAlignEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }



    android.applicationVariants.all { variant ->
        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "GitPath_${variant.productFlavors[0].name}_${defaultConfig.versionName}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:recyclerview-v7:23.3.0'
    compile 'com.android.support:support-v4:23.3.0'
    compile 'com.android.support:appcompat-v7:23.3.0'
    compile 'com.android.support:cardview-v7:23.3.0'
    compile 'com.android.support:design:23.3.0'

    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'org.jsoup:jsoup:1.9.1'

    compile 'com.squareup.retrofit2:retrofit:2.0.2'
    compile 'com.squareup.retrofit2:converter-gson:2.0.2'
    compile 'com.squareup.retrofit2:adapter-rxjava:2.0.2'
    compile 'com.google.code.gson:gson:2.6.2'

    compile 'com.jakewharton:butterknife:7.0.1'
    compile 'io.reactivex:rxjava:1.1.0'
    compile 'io.reactivex:rxandroid:1.1.0'

    compile 'it.sephiroth.android.library.bottomnavigation:bottom-navigation:1.0.7'

//    compile 'com.facebook.stetho:stetho:1.3.1'
//    compile 'com.facebook.stetho:stetho-okhttp3:1.3.1'
}

def releaseTime() {
    return new Date().format("yyyyMMddHH", TimeZone.getTimeZone("UTC"))
}

assembleRelease {}.doLast {
    updateVersionCode()
}

def getVersionCode() {
    def versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def versionCode = versionProps['build.number'].toInteger()
        println('Current version code is ' + versionCode.toString())
        return versionCode
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}

def updateVersionCode() {
    def runTasks = gradle.startParameter.taskNames

    if (!('assemble' in runTasks || 'assembleRelease' in runTasks || 'aR' in runTasks)) {
        return
    }

    def File versionFile = file('version.properties')

    if (versionFile.exists()) {
        def Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        def currentVersionCode = versionProps['build.number'].toInteger()
        currentVersionCode++
        versionProps['build.number'] = currentVersionCode.toString()
        versionProps.store(versionFile.newWriter(), null)
        println('Updated version code to ' + currentVersionCode.toString())
    } else {
        throw new GradleException("Could not find version.properties!")
    }
}
